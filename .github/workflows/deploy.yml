<<<<<<< HEAD
name: CI/CD to EC2 - Inventory Services
=======
name: CI/CD to EC2
>>>>>>> 27b76af09d8d9300c2fcc9a3a5d2afb81e4202d2

on:
  push:
    branches: [ "QA" ]

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

<<<<<<< HEAD
      # 游댳 Building Microservices in Java (only if applicable)
      - name: Build Java Application
        run: mvn clean package -DskipTests || echo "No Maven project found, skipping..."

      # 游댳 Check files in target folder (for Java)
      - name: List files in target directory
        run: ls -l target/ || echo "No target directory found, skipping..."
=======
      # 游댳 Construir la aplicaci칩n y generar el .jar
      - name: Build Java Application
        run: mvn clean package -DskipTests

      # 游댳 Verificar que el .jar se gener칩 correctamente
      - name: List files in target directory
        run: ls -l target/
>>>>>>> 27b76af09d8d9300c2fcc9a3a5d2afb81e4202d2

      # 游댳 Login en Docker Hub
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

<<<<<<< HEAD
      # 游댳 Building and Uploading Docker Images for Inventory Microservices
      - name: Build Docker Image
        run: docker build -t anggeloo/microservice-search-inventory:latest .

=======
      # 游댳 Construir la imagen de Docker
      - name: Build Docker Image
        run: docker build -t anggeloo/microservice-search-inventory:latest .

      # 游댳 Subir la imagen a Docker Hub
>>>>>>> 27b76af09d8d9300c2fcc9a3a5d2afb81e4202d2
      - name: Push Docker Image
        run: docker push anggeloo/microservice-search-inventory:latest

  deploy-to-ec2:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
<<<<<<< HEAD
            # 1) Change to the directory where docker-compose.yml is located
            cd /home/ubuntu/

            # 2) Download the latest inventory images from Docker Hub
            docker pull anggeloo/microservice-search-inventory:latest
            docker pull anggeloo/microservice-add-inventory:latest
            docker pull anggeloo/microservice-update-inventory:latest
            docker pull anggeloo/microservice-delete-inventory:latest

            # 3) Stop and remove previous containers
            docker-compose down

            # 4) Push new containers with updated images
            docker-compose up -d --remove-orphans
=======
            # 1) Descargar la 칰ltima versi칩n de la imagen desde Docker Hub
            docker pull anggeloo/microservice-search-inventory:latest

            # 2) Detener y eliminar el contenedor previo si existe
            docker stop product_container || true
            docker rm product_container || true

            # 3) Crear un archivo .env con las credenciales necesarias
            echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "PORT=${{ secrets.PORT }}" >> .env
            # Agrega m치s variables si es necesario

            # 4) Correr el nuevo contenedor con las variables de entorno
            docker run -d --name product_container \
              --env-file .env \
              -p 8080:8080 \
              anggeloo/microservice-search-inventory:latest
>>>>>>> 27b76af09d8d9300c2fcc9a3a5d2afb81e4202d2
